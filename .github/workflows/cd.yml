name: Deploy to ec2
on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  push_to_dockerhub:
    name: Push to dockerhub
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: env setting
        run: |
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env
          echo "NEXT_PUBLIC_KAKAO_REDIRECT=${{ secrets.NEXT_PUBLIC_KAKAO_REDIRECT }}" >> .env
          echo "NEXT_PUBLIC_KAKAO_KEY=${{ secrets.NEXT_PUBLIC_KAKAO_KEY }}" >> .env
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_KAKAO_REDIRECT: ${{ secrets.NEXT_PUBLIC_KAKAO_REDIRECT }}
          NEXT_PUBLIC_KAKAO_KEY: ${{ secrets.NEXT_PUBLIC_KAKAO_KEY }}
          
      - name: build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}

  deploy_from_registry:
    name: Connect server via SSH and update container
    needs: push_to_dockerhub
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Connect and Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{secrets.AWS_KEY}}
        port: 22
        script:
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}

          docker stop ${{ secrets.DOCKER_IMAGE_NAME }} || true
            
          docker rm ${{ secrets.DOCKER_IMAGE_NAME }} || true
            
          docker network create app_network || true

          docker run -d --name=${{ secrets.DOCKER_IMAGE_NAME }} --rm -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}
            
          docker image prune -f
